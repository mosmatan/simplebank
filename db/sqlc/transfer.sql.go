// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transfer.sql

package db

import (
	"context"
)

const createTranfer = `-- name: CreateTranfer :one
INSERT INTO transfers (
  from_acount_id,
  to_acount_id,
  amount
) VALUES (
  $1, $2, $3
) RETURNING id, from_acount_id, to_acount_id, amount, created_at
`

type CreateTranferParams struct {
	FromAcountID int64 `json:"from_acount_id"`
	ToAcountID   int64 `json:"to_acount_id"`
	Amount       int64 `json:"amount"`
}

func (q *Queries) CreateTranfer(ctx context.Context, arg CreateTranferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTranfer, arg.FromAcountID, arg.ToAcountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAcountID,
		&i.ToAcountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTranfer = `-- name: DeleteTranfer :exec
DELETE FROM transfers 
WHERE id = $1
`

func (q *Queries) DeleteTranfer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTranfer, id)
	return err
}

const getTranfer = `-- name: GetTranfer :one
SELECT id, from_acount_id, to_acount_id, amount, created_at FROM transfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTranfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTranfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAcountID,
		&i.ToAcountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTranfers = `-- name: ListTranfers :many
SELECT id, from_acount_id, to_acount_id, amount, created_at FROM transfers
WHERE from_acount_id = $1 OR to_acount_id = $2
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTranfersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTranfers(ctx context.Context, arg ListTranfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTranfers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAcountID,
			&i.ToAcountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTranfer = `-- name: UpdateTranfer :one
UPDATE transfers
SET from_acount_id = $2,
to_acount_id = $3,
amount = $4
WHERE id = $1
RETURNING id, from_acount_id, to_acount_id, amount, created_at
`

type UpdateTranferParams struct {
	ID           int64 `json:"id"`
	FromAcountID int64 `json:"from_acount_id"`
	ToAcountID   int64 `json:"to_acount_id"`
	Amount       int64 `json:"amount"`
}

func (q *Queries) UpdateTranfer(ctx context.Context, arg UpdateTranferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, updateTranfer,
		arg.ID,
		arg.FromAcountID,
		arg.ToAcountID,
		arg.Amount,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAcountID,
		&i.ToAcountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
